テストテストテストテスト

testtstests    ゆんける oppai oppai

testtstests

初愛ねんね

meg

こんにちは富士山こどもの国


memo: 処理の流れ
「　lineからリクエスト →　vercelのURL/webhook　→　server.js(サーバー起動)

→　bot.js(messageイベントとかpostbackイベントなどの仕分け)
　→　message.js or postback.js or .....(具体的な処理)
→ bot.js

→　lineに返す　」


ーーーーーーーーーーーーーーーーーーーーーー
database には　userid, url,  contextカラムがある
「カレンダーURL登録」と送る→message.js/textEvent関数内で dbAPIに　userId とcontextに'memomode'を代入して送る
→contextがmemomodeなので次に送信されたmessageはtextEvent関数内の冒頭でdvAPIにmessageが送信される
→contextを空にする


axios.[put/ post（追加）] [get(取得)]()　　apiをたたく

登録したURLを参照し取ってきたicalデータを整理してスプレッドシートに保存する

const ConvertObj = (title,year,month,day,hour,minute) => {      //icalデータの時間表記を整理する関数
    let time = new Date()
    time.setFullYear(year)
    time.setMonth(month)
    time.setDate(day)
    time.setHours(hour)
    time.setMinutes(minute)
    time.setHours(time.getHours()+9)

    let todo = {
        TITLE:title,
        YEAR:time.getFullYear(),
        MONTH:time.getMonth(),
        DAY:time.getDate(),
        HOUR:time.getHours(),
        MINUTE:time.getMinutes()
    }
    return todo;
}

axios.get(`${dbAPI}/search?userId=${userId}`)       //sheetDBAPIにリクエストを送る
    .then(r => r.data)
    .then(userData => userData[0].url)      //icalのURLを取得
    .then(url => {
        axios.get(url)      //icalにリクエストを送る
            .then(r => r.data)
            .then(icalData => {
                const parsedData = ical2json.convert(icalData)      //icalからjsonに変換
                const vevent = parsedData.VCALENDAR[0].VEVENT
                const tasks = vevent.filter(item => item.SUMMARY.match(/closes|is due|の提出期限が近づいています/))     //必要なタスクを取得
                const tasksname = []
                for(let i = 0 ; i < tasks.length ; i++){
                    let todo = {}
                    todo = ConvertObj(tasks[i].SUMMARY,
                                Number(tasks[i].DTEND.substr(0,4)),
                                Number(tasks[i].DTEND.substr(4,2)),
                                Number(tasks[i].DTEND.substr(6,2)),
                                Number(tasks[i].DTEND.substr(9,2)),
                                Number(tasks[i].DTEND.substr(11,2)))

                    tasksname.push(todo)
                }
                axios.put(`${dbAPI}/userId/${userId}`,{data: [{tasks: tasksname}]})     //整理したデータを保存
            })
    })

スプレッドシートに保存されたタスクから、今日のタスクを取得する

const todayDate = new Date()        //今日の日付を取得
todayDate.setHours(todayDate.getHours())
const thisYear = todayDate.getFullYear()
const thisMonth = todayDate.getMonth() + 1
const today = todayDate.getDate()

axios.get(`${dbAPI}/search?userId=${userId}`)
    .then(r => r.data)
    .then(userData => userData[0].tasks)        //スプレッドシートからタスクを取得
    .then(tasksJson => JSON.parse(tasksJson))
    .then(tasks => {
        const todayTasks = tasks.filter(value => value.YEAR === thisYear && value.MONTH === thisMonth && value.DAY === today)       //今日のタスクを取得
        axios.put(`${dbAPI}/userId/${userId}`,{data: [{todaytasks: todayTasks}]})       //今日のタスクを別のカラムに保存
    })

axios.get(`${dbAPI}/search?userId=${userId}`)
    .then(r => r.data)
    .then(userData => userData[0].todaytasks)
    .then(tasksJson => JSON.parse(tasksJson))
    .then(todayTasks => {
        console.log(todayTasks)     //todayTasksが今日のタスクになります
    })